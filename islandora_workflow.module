<?php
/**
 * @file
 * @author: William Panting
 * @date: 17/05/2011
 * This module is intended to implement a generic Islandora workflow around the creation and publication of objects.
 */

/**
 * This generates the main workflow page
 * @return $page: The html of the page to return
 */
function islandora_workflow_work() {
  //init
  $page_tabs=array(
    '#type' => 'tabset',
  );
  $create_object_tab='<P>New Object</P>';//available to all
  $objects_tab='<P>My Objects</P>';//available to all
  $create_collections_tab='<P>New Collection</P>';//available to ?
  
  //create and send out top level tabs based on the user's available permissions
  $page_tabs['Objects'] = array(
        '#type' => 'tabpage',
        '#title' => t('My Objects'),
        '#content' => $objects_tab,
        '#weight' => '1',
        '#theme' => 'workflow_table'
      );
  $page_tabs['New Object'] = array(
        '#type' => 'tabpage',
        '#title' => t('New Object'),
        '#content' => $create_object_tab,
        '#weight' => '3'
      );
  if (user_access('islandora_workflow_Administrator') || user_access('islandora_workflow_Manager') || user_access('administer')) {
    $page_tabs['New Collection'] = array(// available to admins
          '#type' => 'tabpage',
          '#title' => t('New Collection'),
          '#content' => $create_collections_tab,
          '#weight' => '4'
        );
  }    
  return tabs_render($page_tabs);
}

/**
 * The menu entries for this module.
 * @return $menuEntries: An arrray of the items to be added to the drupal menu
 */
function islandora_workflow_menu() {
  $menuEntries= array();
  //settings associated with islandora_workflow
  $menuEntries['admin/settings/islandora_workflow_opts']=array(
    'title' => t('Islandora workflow settings'),
    'description' => t('Here you can change various settings for the islandora_workflow module.'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('islandora_workflow_admin'),
    'access arguments' => array('islandora_workflow_Administrator'),
    'type' => MENU_NORMAL_ITEM
  );
    //settings associated with islandora_workflow and collection permissions
  $menuEntries['admin/settings/islandora_workflow_perms']=array(
    'title' => t('Islandora workflow permissions'),
    'description' => t('Here you can assign permissions to roles on a collection by collection level.'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('islandora_workflow_collection_permissions'),
    'access callback' => 'islandora_wokflow_check_permissions',
    'access arguments' => array(array('islandora_workflow_Administrator', 'islandora_workflow_Manager')),
    'type' => MENU_NORMAL_ITEM
  );
  //main working page for islandora_workflow
  $menuEntries['islandora_workflow']=array(
    'title' => t('My Islandora work'),
    'description' => t('This is the main access point to islandora_workflow'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('islandora_workflow_work'),
    'access callback' => 'islandora_wokflow_check_permissions',
    'access arguments' => array(array('islandora_workflow_Administrator', 'islandora_workflow_Editor', 'islandora_workflow_Manager', 'islandora_workflow_Submitter')),
    'type' => MENU_NORMAL_ITEM
   );
 return $menuEntries;
}

/**
 * This function is the access callback used for access to the workflow section of this module
 * @param $permission_array: those user roles to allow access
 * @return $bool: wheather or not to permit access
 */
function islandora_wokflow_check_permissions($permission_array) {  
  //loop through permissions allowed
  foreach ($permission_array as $permission) {
    //return true if the user has an allowed permission
    if (user_access($permission)) {
      return TRUE;
    }
  }
  //if no permission matched then return false
  return FALSE;
}

/**
 * This function returns the form that will let an administrator modify the module's settings
 * TODO: REMOVE REFERENCE TO ISLANDORA_WORKFLOW.INC AND THE CALL TO THE ISLANDORA-WORKFLOW_INSERT_TEST_DATA FUNC
 * @return $adminForm: the form for edditing islandora_workflow settings.
 */
function islandora_workflow_admin() {
  $adminForm=array();
  //security setting ie. xacml enforced on/off
  $adminForm['islandora_workflow_enforce_security']= array(
    '#type' => 'checkbox',
    '#title' => t('Enforce Security'),
    '#default_value' => variable_get('islandora_workflow_enforce_security', 0),
    '#description' => t("Wheather or not to use XACML to enforce workflow."),
  );
  //module_load_include('inc', 'islandora_workflow', 'islandora_workflow');
  //islandora_workflow_insert_test_data();
  return system_settings_form($adminForm); 
}

/**
 * drupal permission hook
 * The list of avaialble permissions for this module.
 * @return array: The list of permissions.
 */
function islandora_workflow_perm() {
  return array('islandora_workflow_Administrator', 'islandora_workflow_Editor', 'islandora_workflow_Manager', 'islandora_workflow_Submitter');
}

/**
 * drupal hook to show help
 * @param $path: The path that the help is being accessed from.
 * @return $help: The help string that will be returned to the user.
 */
function islandora_workflow_help($path, $arg) {
  $help='';//default
  
  switch ($path) {
    case 'admin/modules#description' :
    $help= t('A generic workflow module for Fedora objects.');
  }
  
  return $help;
}

/**
 * This function registers themeing functions with Drupal.
 * @return array $themes: the array of available themes
 */
function islandora_workflow_theme() {
   $themes=array();
   $themes['permissions_table']=array(
   'arguments' => array('list' => NULL, 'form' => NULL),
   'template' => 'permissions_table'
    );
   $themes['workflow_table']=array(
   'arguments' => array('list' => NULL, 'form' => NULL),
   'template' => 'workflow_table'
    );
   return $themes;
 }
 
 /**
  * This function handles making variables available to the theme template for 
  * the islandora_workflow_collection_permissions page
  * @param array ref $vars: the list of variables (including the form) to send to the template
  * @return array $vars: the modified list of variables to send to the template
  */
function islandora_workflow_preprocess_permissions_table(&$vars) {
  module_load_include('inc', 'islandora_workflow', 'islandora_workflow');
  
  $vars['collections']=islandora_workflow_get_current_users_collections();
  $vars['roles']=islandora_workflow_get_roles_with_module_permissions();
  
  //render each form element
  foreach ($vars['roles'] as $role_id => $role_name) {
    foreach ($vars['collections'] as $collection_id => $collection_name) {
      $vars['list'][$role_id][$collection_id]=drupal_render($vars['list'][$role_id][$collection_id]);
    }
  }
}

 /**
  * This function handles making variables available to the theme template for 
  * the workflows tab of the 'work' page
  * @param array ref $vars: the list of variables (including the form) to send to the template
  * @return array $vars: the modified list of variables to send to the template
  */
function islandora_workflow_preprocess_workflow_table(&$vars) {
}
 
 /**
 * This generates the page for editing collection level permissions
 * @return $collection_permissions_form: The form for changing collection permissions granted to roles
 */
function islandora_workflow_collection_permissions() {
  //init
  module_load_include('inc', 'islandora_workflow', 'islandora_workflow'); 
  $collection_permissions_form=array();
  $current_module_permissions=array();
  
  //collect current state data
  $my_collections=islandora_workflow_get_current_users_collections();//used to get list of collections to display

  $current_module_permissions=islandora_workflow_get_roles_with_module_permissions();//used to get what roles to display and avaialbe options for selects
  $current_collection_permissions=islandora_workflow_get_all_permissions();//used to find the default options for slects
  //setup the form
  $collection_permissions_form['islandora_workflow_collection_permissions_table'] = array(
    '#type' => 'fieldset',
    '#title' => t('Collecion Permissions'),
    '#collapsible' => FALSE,
    '#collapsed' => FALSE,
    '#tree' => TRUE, //See http://drupal.org/node/751826
    '#description' => t('Assign collection level permissions to roles.'),
  );
  //submit button
  $collection_permissions_form['update']= array(
    '#type' => 'submit',
    '#value' => t('Update'));
  //restore button
  $collection_permissions_form['restore']= array(
    '#type' => 'submit',
    '#value' => t('Restore'));  
  //theme
  $collection_permissions_form['islandora_workflow_collection_permissions_table']['permissions_table']=array(
  '#theme' => 'permissions_table'  
  );
  
  //populate the form
  foreach ($current_module_permissions as $role_id => $role_name) {//roles
      //add none to the possible options
      $current_module_permissions[$role_id][key($role_name)][]='';
      foreach ($my_collections as $collection_id => $collection_name) {//collections
        //drupal made me do it...
        $collection_permissions_form['islandora_workflow_collection_permissions_table']['permissions_table'][$role_id][$collection_id] = array(
        '#type' => 'select',
        //default value works, but if you hit refresh on the page the values do not go back to the default... navigating away does reset the value
        '#default_value' => array_search($current_collection_permissions[$role_id][$collection_id], $current_module_permissions[$role_id][key($role_name)]),//make this into whatever the current setting is for that collection/role
        '#options' => $current_module_permissions[$role_id][key($role_name)],//what are available to the current role
        );
      }
  }
  return $collection_permissions_form;
}
 
 /**
  * This function processes the form submitted from the collection permission page
  */
function islandora_workflow_collection_permissions_submit($collection_permissions_form, &$collection_permissions_form_state) {
  $clicked_button = $collection_permissions_form_state['clicked_button']['#value'];
  
  if ($clicked_button=='Update') {//handle updating the page
    //init
    $current_permissions=islandora_workflow_get_all_permissions();
    //these arrays all follow array[$role_id][$collection_id]str
    $changed_permissions=array();
    $new_permissions=array();
    $removed_permissions=array();
    
    //get the values returned by the form
    $possible_permission=$collection_permissions_form_state['values']['islandora_workflow_collection_permissions_table']['permissions_table'];
    foreach ($possible_permission as $role_id => $collection) {
      
      foreach ($collection as $collection_id => $select_element) {
        
        $select_element_index=$possible_permission[$role_id][$collection_id];
        $select_element_value=$collection_permissions_form['islandora_workflow_collection_permissions_table']['permissions_table'][$role_id][$collection_id]['#options'][$select_element_index];
        //compare the form values against the database and record the changes necessary
        if (isset($current_permissions[$role_id][$collection_id])) {//if there is currently a DB rule
          if ($current_permissions[$role_id][$collection_id]!=$select_element_value) {//if the DB and FORM disagree
            if ($select_element_value=='') {// if the form element is empty
              //add the form rule to the DB queue for deleting the rule
              $removed_permissions[$role_id][$collection_id] = $current_permissions[$role_id][$collection_id];
            }
            else {//if the form element is populated
              //add the form rule to the DB queue for rewriting the rule
              $changed_permissions[$role_id][$collection_id] = $select_element_value;
            }
          }
        }
        else {//if there is NOT a DB rule
          if ($select_element_value!='') {//if the form's rule is NOT empty
            //add the form rule to the DB queue for adding a permission
            $new_permissions[$role_id][$collection_id]=$select_element_value;
          }//if it is empty do nothing          
        }
      }
    }
    //send changes to DB
    foreach ($changed_permissions as $role_id => $collection) {
      foreach ($collection as $collection_id => $permission) {
        $query='UPDATE {islandora_workflow_permissions}';
        $query=$query . ' SET role=' . $role_id . ', collection="' . $collection_id . '", permission="' . $permission . '"';
        $query= $query .' WHERE role=' . $role_id . ' AND collection="' . $collection_id . '"';
        db_query($query);
      }
    }
    //send new permissions to DB
    foreach ($new_permissions as $role_id => $collection) {
      foreach ($collection as $collection_id => $permission) {
        $record=array(
          'role' => $role_id,
          'collection' => $collection_id,
          'permission' => $permission
        );
        drupal_write_record('islandora_workflow_permissions', $record);
      }
    }
    //delete now unnecessary entries in DB
    foreach ($removed_permissions as $role_id => $collection) {
      foreach ($collection as $collection_id => $permission) {
        $query='DELETE FROM {islandora_workflow_permissions}';
        $query= $query .' WHERE role=' . $role_id . ' AND collection="' . $collection_id . '"';
        db_query($query);
      }
    }
    //print out to user
    drupal_set_message('Changes to permissions were processed.');
  }
  elseif ($clicked_button=='Restore') {//handle reset
    drupal_set_message('Permissions have not been changed.');
  }
}