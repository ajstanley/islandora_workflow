<?php
/**
 * @file
 * @author: William Panting
 * @date: 17/05/2011
 * This module is intended to implement a generic Islandora workflow around the creation and publication of objects.
 * 
 * Two different techniqes are being used for generating similar tables in tabs here.  
 * 1. The work tabs use the same function but pass a parameter to change the content of the form because the only 
 * difference is some missing elements in the workflow tab vs the overview tab.
 * 
 * 2. The permission tabs use seperate functions because the have enough differences (especialy in the submit funciton) to make this easier to follow.
 */

/**
 * This generates the main workflow page
 * @return $page: The html of the page to return
 */
function islandora_workflow_work() {
  $page_tabs=array(
    '#type' => 'tabset',
  );
  $page_tabs['Workflow'] = array(
        '#type' => 'tabpage',
        '#title' => t('Workflow'),
        '#content' => drupal_get_form('islandora_workflow_work_form','workflow'),
        '#weight' => '1',
      );
  if (user_access('islandora_workflow_Administrator') || user_access('islandora_workflow_Manager') || user_access('islandora_workflow_Editor') || user_access('administer')) {
    $page_tabs['Overview'] = array(
          '#type' => 'tabpage',
          '#title' => t('Overview'),
          '#content' => drupal_get_form('islandora_workflow_work_form', 'overview'),
          '#weight' => '2',
        );
  }
  $page_tabs['New Object'] = array(
        '#type' => 'tabpage',
        '#title' => t('New Object'),
        '#content' => 'asdt',//drupal_render($create_object_tab_form),
        '#weight' => '3'
      );
  if (user_access('islandora_workflow_Administrator') || user_access('islandora_workflow_Manager') || user_access('administer')) {
    $page_tabs['New Collection'] = array(// available to admins
          '#type' => 'tabpage',
          '#title' => t('New Collection'),
          '#content' => 'asdf',//drupal_render($create_collections_tab_form),
          '#weight' => '4'
        );
  }    
  return tabs_render($page_tabs);
}

/**
 * This function builds the forms for the islandora_workflow_work page
 * @param string $tab: which tab is calling the form, iether 'overview' or 'workflow'
 * @return array $form: the array containing the aporpriate form
 * @todo: refactor the bottom buttons so that they only appear if the user has active permissions of the necessary levels... will need helper functions
 */
function islandora_workflow_work_form($tab) {
  //init
  module_load_include('inc', 'islandora_workflow', 'islandora_workflow'); //for getting workflow info
  module_load_include('inc', 'fedora_repository', 'api/fedora_collection'); //for getting members of collections etc.
  $users_manager_collections=islandora_workflow_get_current_users_collections();
  $users_editor_collections=islandora_workflow_get_current_users_collections('islandora_workflow_Editor');
  $users_submitter_collections=islandora_workflow_get_current_users_collections('islandora_workflow_Submitter');
  //tab forms
  $workflow_tabs_form['objects_form']=array(    
    '#type' => 'fieldset',
    '#title' => t('Workflow'),
    '#collapsible' => FALSE,
    '#collapsed' => FALSE,
    '#tree' => TRUE,
    '#description' => t('Perform work on objects you have access to.'),
  );
  $workflow_tabs_form['objects_form']['objects_form_elems']=array('#theme' => 'workflow_table');
  
  //submit button
  $workflow_tabs_form['Submit']= array(
    '#type' => 'submit',
    '#weight' => '1',
    '#value' => t('Submit'));
    //approve button
  if (user_access('islandora_workflow_Administrator') || user_access('islandora_workflow_Manager') || user_access('islandora_workflow_Editor') || user_access('administer')) {
    $workflow_tabs_form['Approve']= array(
      '#type' => 'submit',
      '#weight' => '2',
      '#value' => t('Approve'));
 }
    //publish button
  if (user_access('islandora_workflow_Administrator') || user_access('islandora_workflow_Manager') || user_access('administer')) {
    $workflow_tabs_form['Publish']= array(
      '#type' => 'submit',
      '#weight' => '3',
      '#value' => t('Publish'));  
  }
  //reject button
  if (user_access('islandora_workflow_Administrator') || user_access('islandora_workflow_Manager') || user_access('islandora_workflow_Editor') || user_access('administer')) {
    $workflow_tabs_form['Reject']= array(
      '#type' => 'submit',
      '#weight' => '4',
      '#value' => t('Reject'));
  }
  //delete button
  $workflow_tabs_form['Delete']= array(
    '#type' => 'submit',
    '#weight' => '5',
    '#value' => t('Delete'));
  
  
  //populate tab for viewing objects
  
  //get all members of the collections the user has manager/admin access to
  if ($users_manager_collections) {
    foreach ($users_manager_collections as $collection_id => $collection_name) {
      //get all objects in collection
      $collection_members=get_related_items_as_array($collection_id, 'isMemberOf', 10000 , 0, FALSE);
      //filter collection items if in workflow tab @todo: implement
      if ($tab=='workflow') {
        
      }
      foreach ($collection_members as $member) {
        $workflow_tabs_form['objects_form']['objects_form_elems'][$collection_id][$member]['Edit']=array(
        '#type' => 'submit',
        '#value' => t('Edit'),
        );
        $workflow_tabs_form['objects_form']['objects_form_elems'][$collection_id][$member]['Manage']=array(
        '#type' => 'submit',
        '#value' => t('Manage'),
        );
        $workflow_tabs_form['objects_form']['objects_form_elems'][$collection_id][$member]['Selecter']=array(
        '#type' => 'checkbox',
        '#title' => t(''),
        );
      }
    }
  }
  //get all members of the collections the user has editor level for, excluding those that the user has 
  if ($users_editor_collections) {
    foreach ($users_editor_collections as $collection_id => $collection_name) {
      if (!isset($users_manager_collections[$collection_id])) {//exclude higher level permissions in the same collection
        //get all objects in collection
        $collection_members=get_related_items_as_array($collection_id, 'isMemberOf', 10000 , 0, FALSE);
        //filter collection items if in workflow tab @todo: implement
        if ($tab=='workflow') {
          
        }
        foreach ($collection_members as $member) {
          $workflow_tabs_form['objects_form']['objects_form_elems'][$collection_id][$member]['Edit']=array(
          '#type' => 'submit',
          '#value' => t('Edit'),
          );
          
          $workflow_tabs_form['objects_form']['objects_form_elems'][$collection_id][$member]['Manage']=array(
          '#type' => 'submit',
          '#value' => t('Manage'),
          );
          $workflow_tabs_form['objects_form']['objects_form_elems'][$collection_id][$member]['Selecter']=array(
          '#type' => 'checkbox',
          '#title' => t(''),
          );
        }
      }
    }
  }
  //get all members of the collections the user has submitter level for, excluding those that the user has manager/editor level 
  if ($users_submitter_collections) {
    foreach ($users_submitter_collections as $collection_id => $collection_name) {
      if ((!isset($users_manager_collections[$collection_id])) && (!isset($users_editor_collections[$collection_id]))) {//exclude higher level permissions in the same collection
        //get all objects the user is assigned or is the creator of in those collections they are submitters (only) in collection
        $collection_members=get_related_items_as_array($collection_id, 'isMemberOf', 10000 , 0, FALSE);
        //filter collection items if in workflow tab @todo: implement
        if ($tab=='workflow') {
          
        }
        foreach ($collection_members as $member) {
          $workflow_tabs_form['objects_form']['objects_form_elems'][$collection_id][$member]['Edit']=array(
          '#type' => 'submit',
          '#value' => t('Edit'),
          );
          $workflow_tabs_form['objects_form']['objects_form_elems'][$collection_id][$member]['Selecter']=array(
          '#type' => 'checkbox',
          '#title' => t(''),
          );
          $workflow_tabs_form['objects_form']['objects_form_elems'][$collection_id][$member]['Manage']=array(
          '#type' => 'submit',
          '#value' => t('Manage'),
          );
        }
     }
    }
  }
  return $workflow_tabs_form;
}

/**
 * The menu entries for this module.
 * @return $menuEntries: An arrray of the items to be added to the drupal menu
 */
function islandora_workflow_menu() {
  $menuEntries= array();
  //settings associated with islandora_workflow
  $menuEntries['admin/settings/islandora_workflow_opts']=array(
    'title' => t('Islandora workflow settings'),
    'description' => t('Here you can change various settings for the islandora_workflow module.'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('islandora_workflow_admin'),
    'access arguments' => array('islandora_workflow_Administrator'),
    'type' => MENU_NORMAL_ITEM
  );
    //settings associated with islandora_workflow and collection permissions
  $menuEntries['admin/settings/islandora_workflow_perms']=array(
    'title' => t('Islandora workflow permissions'),
    'description' => t('Here you can assign permissions to roles on a collection by collection level.'),
    'page callback' => 'islandora_workflow_collection_permissions',
    'access callback' => 'islandora_wokflow_check_permissions',
    'access arguments' => array(array('islandora_workflow_Administrator', 'islandora_workflow_Manager')),
    'type' => MENU_NORMAL_ITEM
  );
  //main working page for islandora_workflow
  $menuEntries['islandora_workflow']=array(
    'title' => t('My Islandora work'),
    'description' => t('This is the main access point to islandora_workflow'),
    'page callback' => 'islandora_workflow_work',
    'access callback' => 'islandora_wokflow_check_permissions',
    'access arguments' => array(array('islandora_workflow_Administrator', 'islandora_workflow_Editor', 'islandora_workflow_Manager', 'islandora_workflow_Submitter')),
    'type' => MENU_NORMAL_ITEM
   );
 return $menuEntries;
}

/**
 * This function is the access callback used for access to the workflow section of this module
 * @param $permission_array: those user roles to allow access
 * @return $bool: wheather or not to permit access
 */
function islandora_wokflow_check_permissions($permission_array) {  
  //loop through permissions allowed
  foreach ($permission_array as $permission) {
    //return true if the user has an allowed permission
    if (user_access($permission)) {
      return TRUE;
    }
  }
  //if no permission matched then return false
  return FALSE;
}

/**
 * This function returns the form that will let an administrator modify the module's settings
 * @return $adminForm: the form for edditing islandora_workflow settings.
 */
function islandora_workflow_admin() {
  $adminForm=array();
  //security setting ie. xacml enforced on/off
  $adminForm['islandora_workflow_enforce_security']= array(
    '#type' => 'checkbox',
    '#title' => t('Enforce Security'),
    '#default_value' => variable_get('islandora_workflow_enforce_security', 0),
    '#description' => t("Wheather or not to use XACML to enforce workflow."),
  );
  return system_settings_form($adminForm); 
}

/**
 * drupal permission hook
 * The list of avaialble permissions for this module.
 * @return array: The list of permissions.
 */
function islandora_workflow_perm() {
  return array('islandora_workflow_Administrator', 'islandora_workflow_Editor', 'islandora_workflow_Manager', 'islandora_workflow_Submitter');
}

/**
 * drupal hook to show help
 * @param $path: The path that the help is being accessed from.
 * @return $help: The help string that will be returned to the user.
 */
function islandora_workflow_help($path, $arg) {
  $help='';//default
  
  switch ($path) {
    case 'admin/modules#description' :
    $help= t('A generic workflow module for Fedora objects.');
  }
  
  return $help;
}

/**
 * This function registers themeing functions with Drupal.
 * @return array $themes: the array of available themes
 */
function islandora_workflow_theme() {
   $themes=array();
   $themes['permissions_role_table']=array(
   'arguments' => array('list' => NULL, 'form' => NULL),
   'template' => 'permissions_role_table'
    );
   $themes['permissions_user_table']=array(
   'arguments' => array('list' => NULL, 'form' => NULL),
   'template' => 'permissions_user_table'
    );
   $themes['workflow_table']=array(//both workflow and overview tabs should be able to use this template
   'arguments' => array('list' => NULL, 'form' => NULL),
   'template' => 'workflow_table'
    );
   return $themes;
 }
 
 /**
  * This function handles making variables available to the theme template for 
  * the islandora_workflow_collection_permissions page (user tab)
  * @param array ref $vars: the list of variables (including the form) to send to the template
  * @return array $vars: the modified list of variables to send to the template
  */
function islandora_workflow_preprocess_permissions_user_table(&$vars) {
  module_load_include('inc', 'islandora_workflow', 'islandora_workflow');
  $vars['collections']=islandora_workflow_get_current_users_collections();
  $vars['users']=islandora_workflow_get_users_with_module_permissions();
  //render each form element
  foreach ($vars['users'] as $user_id => $user_name) {
    foreach ($vars['collections'] as $collection_id => $collection_name) {
      $vars['list'][$user_id][$collection_id]=drupal_render($vars['list'][$user_id][$collection_id]);
    }
  }
}
 
/**
  * This function handles making variables available to the theme template for 
  * the islandora_workflow_collection_permissions page (role tab)
  * @param array ref $vars: the list of variables (including the form) to send to the template
  * @return array $vars: the modified list of variables to send to the template
  */
function islandora_workflow_preprocess_permissions_role_table(&$vars) {
  module_load_include('inc', 'islandora_workflow', 'islandora_workflow');
  $vars['collections']=islandora_workflow_get_current_users_collections();
  $vars['roles']=islandora_workflow_get_roles_with_module_permissions();
  //render each form element
  foreach ($vars['roles'] as $role_id => $role_name) {
    foreach ($vars['collections'] as $collection_id => $collection_name) {
      $vars['list'][$role_id][$collection_id]=drupal_render($vars['list'][$role_id][$collection_id]);
    }
  }
}

/**
  * This function handles making variables available to the theme template for 
  * the workflow tabs of the 'work' page
  * @param array ref $vars: the list of variables (including the form) to send to the template
  * @return array $vars: the modified list of variables to send to the template
  * @todo: make $vars['collections'] get all the collections that a user has ANY lvl access to this will likely need a helper function to simplify things
  * 	but we could loop through each $vars['collection'] and search results from islandora_workflow_get_current_users_collections()
 */
function islandora_workflow_preprocess_workflow_table(&$vars) {
  module_load_include('inc', 'islandora_workflow', 'islandora_workflow');
  $vars['collections']=islandora_workflow_get_current_users_collections();
  foreach($vars['collections'] as $collection_id => $collection_name) {
  $collection_members=get_related_items_as_array($collection_id, 'isMemberOf', 10000 , 0, FALSE);
    foreach($collection_members as $member) {
      if (isset($vars['list'][$collection_id][$member])) { //The isset is here so that only populated items are rendered into HTML for display
        //render each element
        $vars['list'][$collection_id][$member]['Edit']=drupal_render($vars['list'][$collection_id][$member]['Edit']);
        $vars['list'][$collection_id][$member]['Manage']=drupal_render($vars['list'][$collection_id][$member]['Manage']);
        $vars['list'][$collection_id][$member]['Selecter']=drupal_render($vars['list'][$collection_id][$member]['Selecter']);
      }
    }
  }
}
 
/**
 * This generates the page for editing collection level permissions
 * @return $collection_role_permissions_form: The form for changing collection permissions granted to roles
 */
function islandora_workflow_collection_permissions() {
  $page_tabs=array(
    '#type' => 'tabset',
  );
  
  $page_tabs['Users'] = array(
        '#type' => 'tabpage',
        '#title' => t('Users'),
        '#content' => drupal_get_form('islandora_workflow_user_permissions_form'),
        '#weight' => '1',
      );
 $page_tabs['Roles'] = array(
        '#type' => 'tabpage',
        '#title' => t('Roles'),
        '#content' => drupal_get_form('islandora_workflow_role_permissions_form'),
        '#weight' => '2',
      );
      
  return tabs_render($page_tabs);
}
 
/**
 * This function builds the form that allows users to modify role based permissions for individual collections
 * @return array $collection_role_permissions_form: the array containing the form.
 */
function islandora_workflow_role_permissions_form() {
//init
  module_load_include('inc', 'islandora_workflow', 'islandora_workflow'); 
  $collection_role_permissions_form=array();
  $current_module_permissions=array();
  
  //collect current state data
  $my_collections=islandora_workflow_get_current_users_collections();//used to get list of collections to display

  $current_module_permissions=islandora_workflow_get_roles_with_module_permissions();//used to get what roles to display and avaialbe options for selects
  $current_collection_permissions=islandora_workflow_get_all_role_permissions();//used to find the default options for slects
  //setup the form
  $collection_role_permissions_form['islandora_workflow_collection_permissions_table'] = array(
    '#type' => 'fieldset',
    '#title' => t('Collecion Permissions'),
    '#collapsible' => FALSE,
    '#collapsed' => FALSE,
    '#tree' => TRUE, //See http://drupal.org/node/751826
    '#description' => t('Assign collection level permissions to roles.'),
  );
  //theme
  $collection_role_permissions_form['islandora_workflow_collection_permissions_table']['permissions_table']=array(
  '#theme' => 'permissions_role_table'  
  );
  //submit button
  $collection_role_permissions_form['update']= array(
    '#type' => 'submit',
    '#value' => t('Update'),
    '#weight' => '1');
  //restore button
  $collection_role_permissions_form['restore']= array(
    '#type' => 'submit',
    '#value' => t('Restore'),
    '#weight' => '2'); 
  
  //populate the form
  foreach ($current_module_permissions as $role_id => $role_name) {//roles
      //add none to the possible options
      $current_module_permissions[$role_id][key($role_name)][]='';
      //remove the islandora_workflow_Administrator permission
      if (in_array('islandora_workflow_Administrator', $current_module_permissions[$role_id][key($role_name)])) {
        unset($current_module_permissions[$role_id][key($role_name)][array_search('islandora_workflow_Administrator', $current_module_permissions[$role_id][key($role_name)])]);
      }
      //change the left over permission strings to be more user friendly
      if (in_array('islandora_workflow_Manager', $current_module_permissions[$role_id][key($role_name)])) {
        $current_module_permissions[$role_id][key($role_name)][array_search('islandora_workflow_Manager', $current_module_permissions[$role_id][key($role_name)])]='Manager';
      }
      if (in_array('islandora_workflow_Editor', $current_module_permissions[$role_id][key($role_name)])) {
        $current_module_permissions[$role_id][key($role_name)][array_search('islandora_workflow_Editor', $current_module_permissions[$role_id][key($role_name)])]='Editor';
      }
      if (in_array('islandora_workflow_Submitter', $current_module_permissions[$role_id][key($role_name)])) {
        $current_module_permissions[$role_id][key($role_name)][array_search('islandora_workflow_Submitter', $current_module_permissions[$role_id][key($role_name)])]='Submitter';
      }
      foreach ($my_collections as $collection_id => $collection_name) {//collections
        //change the default permission string to be inline with the user friendly strings
        if ($current_collection_permissions[$role_id][$collection_id]=='islandora_workflow_Manager') {
          $current_collection_permissions[$role_id][$collection_id]='Manager';
        }
        if ($current_collection_permissions[$role_id][$collection_id]=='islandora_workflow_Editor') {
          $current_collection_permissions[$role_id][$collection_id]='Editor';
        }
        if ($current_collection_permissions[$role_id][$collection_id]=='islandora_workflow_Submitter') {
          $current_collection_permissions[$role_id][$collection_id]='Submitter';
        }
        //drupal made me do it...
        $collection_role_permissions_form['islandora_workflow_collection_permissions_table']['permissions_table'][$role_id][$collection_id] = array(
        '#type' => 'select',
        //default value works, but if you hit refresh on the page the values do not go back to the default... navigating away does reset the value
        '#default_value' => array_search($current_collection_permissions[$role_id][$collection_id], $current_module_permissions[$role_id][key($role_name)]),//make this into whatever the current setting is for that collection/role
        '#options' => $current_module_permissions[$role_id][key($role_name)],//what are available to the current role
        );
      }
  }
  return $collection_role_permissions_form;
}

/**
  * This function processes the form submitted from the collection permission page
  * @param $collection_role_permissions_form: Holds all the data on the state  of the form submitted
  * @param $collection_role_permissions_form_state: An easier to use version of $collection_role_permissions_form
  */
function islandora_workflow_role_permissions_form_submit($collection_role_permissions_form, &$collection_role_permissions_form_state) {
  $clicked_button = $collection_role_permissions_form_state['clicked_button']['#value'];
  if ($clicked_button=='Update') {//handle updating the page
    //init
    $current_permissions=islandora_workflow_get_all_role_permissions();
    //these arrays all follow array[$role_id][$collection_id]str
    $changed_permissions=array();
    $new_permissions=array();
    $removed_permissions=array();
    
    //get the values returned by the form
    $possible_permission=$collection_role_permissions_form_state['values']['islandora_workflow_collection_permissions_table']['permissions_table'];
    foreach ($possible_permission as $role_id => $collection) {
      
      foreach ($collection as $collection_id => $select_element) {
        
        $select_element_index=$possible_permission[$role_id][$collection_id];
        $select_element_value=$collection_role_permissions_form['islandora_workflow_collection_permissions_table']['permissions_table'][$role_id][$collection_id]['#options'][$select_element_index];
        //remap user friendly element option values to permission names
        if ($select_element_value=='Manager') {
          $select_element_value='islandora_workflow_Manager';
        }
        elseif ($select_element_value=='Editor') {
          $select_element_value='islandora_workflow_Editor';
        }
        elseif ($select_element_value=='Submitter') {
          $select_element_value='islandora_workflow_Submitter';
        }
        
        //compare the form values against the database and record the changes necessary
        if (isset($current_permissions[$role_id][$collection_id])) {//if there is currently a DB rule
          if ($current_permissions[$role_id][$collection_id]!=$select_element_value) {//if the DB and FORM disagree
            if ($select_element_value=='') {// if the form element is empty
              //add the form rule to the DB queue for deleting the rule
              $removed_permissions[$role_id][$collection_id] = $current_permissions[$role_id][$collection_id];
            }
            else {//if the form element is populated
              //add the form rule to the DB queue for rewriting the rule
              $changed_permissions[$role_id][$collection_id] = $select_element_value;
            }
          }
        }
        else {//if there is NOT a DB rule
          if ($select_element_value!='') {//if the form's rule is NOT empty
            //add the form rule to the DB queue for adding a permission
            $new_permissions[$role_id][$collection_id]=$select_element_value;
          }//if it is empty do nothing          
        }
      }
    }
    //send changes to DB
    foreach ($changed_permissions as $role_id => $collection) {
      foreach ($collection as $collection_id => $permission) {
        $query='UPDATE {islandora_workflow_role_permissions}';
        $query=$query . ' SET role=' . $role_id . ', collection="' . $collection_id . '", permission="' . $permission . '"';
        $query= $query .' WHERE role=' . $role_id . ' AND collection="' . $collection_id . '"';
        db_query($query);
      }
    }
    //send new permissions to DB
    foreach ($new_permissions as $role_id => $collection) {
      foreach ($collection as $collection_id => $permission) {
        $record=array(
          'role' => $role_id,
          'collection' => $collection_id,
          'permission' => $permission
        );
        drupal_write_record('islandora_workflow_role_permissions', $record);
      }
    }
    //delete now unnecessary entries in DB
    foreach ($removed_permissions as $role_id => $collection) {
      foreach ($collection as $collection_id => $permission) {
        $query='DELETE FROM {islandora_workflow_role_permissions}';
        $query= $query .' WHERE role=' . $role_id . ' AND collection="' . $collection_id . '"';
        db_query($query);
      }
    }
    //print out to user
    drupal_set_message('Changes to permissions were processed.');
  }
  elseif ($clicked_button=='Restore') {//handle reset
    drupal_set_message('Permissions have not been changed.');
  }
}

/**
 * This function builds the form that allows users to modify user based permissions for individual collections
 * @return array $collection_user_permissions_form: the array containing the form.
 */
function islandora_workflow_user_permissions_form() {
//init
  module_load_include('inc', 'islandora_workflow', 'islandora_workflow'); 
  $collection_user_permissions_form=array();
  $current_module_permissions=array();
  
  //collect current state data
  $my_collections=islandora_workflow_get_current_users_collections();//used to get list of collections to display

  $current_module_permissions=islandora_workflow_get_users_with_module_permissions();//used to get what users to display and avaialbe options for selects
  $current_collection_permissions=islandora_workflow_get_all_user_permissions();//used to find the default options for slects
  //setup the form
  $collection_user_permissions_form['islandora_workflow_collection_permissions_table'] = array(
    '#type' => 'fieldset',
    '#title' => t('Collecion Permissions'),
    '#collapsible' => FALSE,
    '#collapsed' => FALSE,
    '#tree' => TRUE, //See http://drupal.org/node/751826
    '#description' => t('Assign collection level permissions to users.'),
  );
  //theme
  $collection_user_permissions_form['islandora_workflow_collection_permissions_table']['permissions_table']=array(
  '#theme' => 'permissions_user_table'  
  );
  //submit button
  $collection_user_permissions_form['update']= array(
    '#type' => 'submit',
    '#value' => t('Update'),
    '#weight' => '1');
  //restore button
  $collection_user_permissions_form['restore']= array(
    '#type' => 'submit',
    '#value' => t('Restore'),
    '#weight' => '2'); 
  
  //populate the form
  foreach ($current_module_permissions as $user_id => $user_name) {//users
      //add none to the possible options
      $current_module_permissions[$user_id][key($user_name)][]='';
      //remove the islandora_workflow_Administrator permission
      if (in_array('islandora_workflow_Administrator', $current_module_permissions[$user_id][key($user_name)])) {
        unset($current_module_permissions[$user_id][key($user_name)][array_search('islandora_workflow_Administrator', $current_module_permissions[$user_id][key($user_name)])]);
      }
      //change the left over permission strings to be more user friendly
      if (in_array('islandora_workflow_Manager', $current_module_permissions[$user_id][key($user_name)])) {
        $current_module_permissions[$user_id][key($user_name)][array_search('islandora_workflow_Manager', $current_module_permissions[$user_id][key($user_name)])]='Manager';
      }
      if (in_array('islandora_workflow_Editor', $current_module_permissions[$user_id][key($user_name)])) {
        $current_module_permissions[$user_id][key($user_name)][array_search('islandora_workflow_Editor', $current_module_permissions[$user_id][key($user_name)])]='Editor';
      }
      if (in_array('islandora_workflow_Submitter', $current_module_permissions[$user_id][key($user_name)])) {
        $current_module_permissions[$user_id][key($user_name)][array_search('islandora_workflow_Submitter', $current_module_permissions[$user_id][key($user_name)])]='Submitter';
      }
      foreach ($my_collections as $collection_id => $collection_name) {//collections
        //change the default permission string to be inline with the user friendly strings
        if ($current_collection_permissions[$user_id][$collection_id]=='islandora_workflow_Manager') {
          $current_collection_permissions[$user_id][$collection_id]='Manager';
        }
        if ($current_collection_permissions[$user_id][$collection_id]=='islandora_workflow_Editor') {
          $current_collection_permissions[$user_id][$collection_id]='Editor';
        }
        if ($current_collection_permissions[$user_id][$collection_id]=='islandora_workflow_Submitter') {
          $current_collection_permissions[$user_id][$collection_id]='Submitter';
        }
        //drupal made me do it...
        $collection_user_permissions_form['islandora_workflow_collection_permissions_table']['permissions_table'][$user_id][$collection_id] = array(
        '#type' => 'select',
        //default value works, but if you hit refresh on the page the values do not go back to the default... navigating away does reset the value
        '#default_value' => array_search($current_collection_permissions[$user_id][$collection_id], $current_module_permissions[$user_id][key($user_name)]),//make this into whatever the current setting is for that collection/user
        '#options' => $current_module_permissions[$user_id][key($user_name)],//what are available to the current user
        );
      }
  }
  return $collection_user_permissions_form;
}

/**
  * This function processes the form submitted from the collection permission page
  * @param $collection_user_permissions_form: Holds all the data on the state  of the form submitted
  * @param $collection_user_permissions_form_state: An easier to use version of $collection_user_permissions_form
  */
function islandora_workflow_user_permissions_form_submit($collection_user_permissions_form, &$collection_user_permissions_form_state) {
  $clicked_button = $collection_user_permissions_form_state['clicked_button']['#value'];
  if ($clicked_button=='Update') {//handle updating the page
    //init
    $current_permissions=islandora_workflow_get_all_user_permissions();
    //these arrays all follow array[$user_id][$collection_id]str
    $changed_permissions=array();
    $new_permissions=array();
    $removed_permissions=array();
    
    //get the values returned by the form
    $possible_permission=$collection_user_permissions_form_state['values']['islandora_workflow_collection_permissions_table']['permissions_table'];
    foreach ($possible_permission as $user_id => $collection) {
      
      foreach ($collection as $collection_id => $select_element) {
        
        $select_element_index=$possible_permission[$user_id][$collection_id];
        $select_element_value=$collection_user_permissions_form['islandora_workflow_collection_permissions_table']['permissions_table'][$user_id][$collection_id]['#options'][$select_element_index];
        //remap user friendly element option values to permission names
        if ($select_element_value=='Manager') {
          $select_element_value='islandora_workflow_Manager';
        }
        elseif ($select_element_value=='Editor') {
          $select_element_value='islandora_workflow_Editor';
        }
        elseif ($select_element_value=='Submitter') {
          $select_element_value='islandora_workflow_Submitter';
        }
        
        //compare the form values against the database and record the changes necessary
        if (isset($current_permissions[$user_id][$collection_id])) {//if there is currently a DB rule
          if ($current_permissions[$user_id][$collection_id]!=$select_element_value) {//if the DB and FORM disagree
            if ($select_element_value=='') {// if the form element is empty
              //add the form rule to the DB queue for deleting the rule
              $removed_permissions[$user_id][$collection_id] = $current_permissions[$user_id][$collection_id];
            }
            else {//if the form element is populated
              //add the form rule to the DB queue for rewriting the rule
              $changed_permissions[$user_id][$collection_id] = $select_element_value;
            }
          }
        }
        else {//if there is NOT a DB rule
          if ($select_element_value!='') {//if the form's rule is NOT empty
            //add the form rule to the DB queue for adding a permission
            $new_permissions[$user_id][$collection_id]=$select_element_value;
          }//if it is empty do nothing          
        }
      }
    }
    //send changes to DB
    foreach ($changed_permissions as $user_id => $collection) {
      foreach ($collection as $collection_id => $permission) {
        $query='UPDATE {islandora_workflow_user_permissions}';
        $query=$query . ' SET user=' . $user_id . ', collection="' . $collection_id . '", permission="' . $permission . '"';
        $query= $query .' WHERE user=' . $user_id . ' AND collection="' . $collection_id . '"';
        db_query($query);
      }
    }
    //send new permissions to DB
    foreach ($new_permissions as $user_id => $collection) {
      foreach ($collection as $collection_id => $permission) {
        $record=array(
          'user' => $user_id,
          'collection' => $collection_id,
          'permission' => $permission
        );
        drupal_write_record('islandora_workflow_user_permissions', $record);
      }
    }
    //delete now unnecessary entries in DB
    foreach ($removed_permissions as $user_id => $collection) {
      foreach ($collection as $collection_id => $permission) {
        $query='DELETE FROM {islandora_workflow_user_permissions}';
        $query= $query .' WHERE user=' . $user_id . ' AND collection="' . $collection_id . '"';
        db_query($query);
      }
    }
    //print out to user
    drupal_set_message('Changes to user based permissions were processed.');
  }
  elseif ($clicked_button=='Restore') {//handle reset
    drupal_set_message('Permissions have not been changed.');
  }
}

/**
 * This function handles all of the possible submits from the main workflow page
  * @param $work_form_form: Holds all the data on the state  of the form submitted
  * @param $work_form_state_form_state: An easier to use version of $work_form_form
 */
function islandora_workflow_work_form_submit($work_form, &$work_form_state) {
  dsm($work_form);
  dsm($work_form_state);
  //init
  $clicked_button = $work_form_state['clicked_button']['#value'];
  module_load_include('inc', 'islandora_workflow', 'islandora_workflow'); 
  $collections=islandora_workflow_get_all_collections();
  if ($clicked_button=='Edit') {
    //on specific object (if the grandparent is a collection)
    if (in_array($work_form_state['clicked_button']['#parents'][search_array($clicked_button,$work_form_state['clicked_button']['#parents'])-2],$collections)) {
      //@todo: make this bring up edit screen
    }
  }
  if ($clicked_button=='Manage') {
    //on specific object (if the grandparent is a collection)
    if (in_array($work_form_state['clicked_button']['#parents'][search_array($clicked_button,$work_form_state['clicked_button']['#parents'])-2],$collections)) {
      //@todo: make this bring up edit screen
    }
  }
  if ($clicked_button=='Submit') {
    
  }
  if ($clicked_button=='Delete') {
    
  }
  if ($clicked_button=='Reject') {
    
  }
  if ($clicked_button=='Approve') {
    
  }
  if ($clicked_button=='Publish') {
    
  }
}
