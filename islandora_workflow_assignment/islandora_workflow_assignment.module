<?php

/**
 * Return all objects assigned to a given user, along with their workflow state.
 * @param user $account a user object.
 * @return array an array of results.
 */
function islandora_workflow_assignment_by_user($account) {
  
  // get the stored query
  $query_file_name = drupal_get_path('module', 'islandora_workflow') . '/assignee_query.txt';
  $query_file_handle = fopen($query_file_name, "r");
  $query_string = fread($query_file_handle, filesize($query_file_name));
  fclose($query_file_handle);

  $query = preg_replace('/\?username/','"'. $account->name .'"',$query);
  $query_return_json = query_resource_index($query, $limit = -1, $offset = 0, $format = 'json');
  
  if ($query_return_json) {
    $query_return = json_decode($query_return_string);
    return $query_return->results;
  }
  return array();

}

/**
 * Get the permissions a user must have in order to be the assignee of an object. 
 * @param string $state
 * @return array An array of permission names. 
 */
function islandora_workflow_assignment_valid_assignee_permissions($state) {
  $permissions = array();
  switch ($state) {
    case 'created':
    case 'rejected':
      $permissions[] = 'islandora_workflow_Submitter';
    case 'submitted':
      $permissions[] = 'islandora_workflow_Editor';
    case 'approved':
      $permissions[] = 'islandora_workflow_Manager';
    default:
      $permissions[] = 'islandora_workflow_Administrator';
      break;
  }
  return $permissions;
}

/**
 * Remove an about-to-be-deleted user from their assignments.
 * @param object $edit
 * @param user $account
 * @return array 
 */
function islandora_workflow_assignment_user_delete_batch(&$edit, &$account) {
  
  module_load_include('inc','islandora_fedora_api','islandora_fedora_api.raw');
  
  $assigned_objects = islandora_workflow_assignment_by_user($account);
  $predicate = 'info:islandora/islandora-system:def/islandora_workflow#assignee';
  $object = $account->name;
  $optional_args = array('isLiteral' => TRUE);
  $operations = array(); // @TODO make the following into a batch job
  foreach ($assigned_objects as $object_pid) {
    // remove the assignment from each object
    $apim = new FedoraAPIM();
    $apim->purgeRelationship($object_pid, $predicate, $object, $optional_args);
  }    
  return $operations;
}

/**
 * Check the validity of a user's assignments after their roles have changed.
 * Remove assignments which have become invalid.
 * @param object $edit
 * @param user $account
 * @return array 
 */
function islandora_workflow_assignment_user_edit_batch(&$edit, &$account) {
  
  module_load_include('inc','islandora_fedora_api','islandora_fedora_api.raw');
  
  $iw_perms = islandora_workflow_perm();
  $assigned_objects = islandora_workflow_assignment_by_user($account);
  $existing_roles = $account->roles;
  if (empty($edit['roles'])) {
    return;
  }
  if (empty(array_diff($account->roles,$edit['roles']))) {
    return;
  }
  $new_roles = $edit['roles'];
  $apim = new FedoraAPIM();
  foreach($assigned_objects as $object) {
    // check the state of each object - and match against the user's perms
    $state = $object->state; 
    $valid_perms = islandora_workflow_assignment_valid_permissions($state);
    $access = FALSE;
    $valid_roles = user_roles(FALSE,$valid_perms);
    if (empty(array_intersect_key($new_roles, $valid_roles))) {
      // remove the assignment
      $predicate = 'info:islandora/islandora-system:def/islandora_workflow#assignee';
      $target = $account->name;
      $optional_args = array('isLiteral' => TRUE);
      $apim->purgeRelationship($object->pid, $predicate, $target, $optional_args);
    }
  }
}

/**
 * Form submission handler for the admin roles form.
 * Checks that users still have permissions to be assigned objects,
 * after a role they previously held has been deleted.
 * If not, the assignment will be removed. 
 */
function islandora_workflow_assignment_role_delete_batch(&$form, &$form_state) {
  
  module_load_include('inc','islandora_workflow','islandora_workflow');
  module_load_include('inc','islandora_fedora_api','islandora_fedora_api.raw');
    
  if ($form_state['values']['op'] == t('Delete role')) {
    $operations = array();

    // why would this be a problem?
    // if there was a single role (this one) which had a permission no other one had
    // (for at least one user),
    // which once they lost it meant they couldn't be assigned to an object no more.

    $assignee_roles = user_roles(FALSE,islandora_workflow_perm());
    $rid = $form_state['values']['rid'];
    if(!array_key_exists($rid,$assignee_roles)) {
      return;
    }
    // so we now know that the role being deleted can be assigned things of some state
    $users = islandora_workflow_get_users_with_role($rid);
    $new_user = new stdClass();
    $apim = new FedoraAPIM();
    foreach($users as $uid) {
      $account = user_load($uid);
      // figure out if they lose any permissions as a result
      $new_roles = array_diff_key($account->roles,array($rid => 'role name'));
      // We can perform user_access() on any stdClass object,
      // as long as it has 'uid' and 'roles' attributes
      $new_user->uid = -1; // hack
      $new_user->roles = $new_roles;
      foreach(islandora_workflow_perm() as $iw_perm) {
        if (user_access($iw_perm,$account)) {
          $old_perms[] = $iw_perm;
        }
        if (user_access($iw_perm,$new_user)) {
          $new_perms[] = $iw_perm;
        }
      }
      $perms_diff = array_diff($old_perms,$new_perms);
      if (empty($perms_diff)) {
        continue; // save time if the user's permissions haven't changed
      }
      // if so, go through all the items for which they are the assignee
      $objects = islandora_workflow_assignment_by_user($account); 
      foreach($objects as $object) {
        // get the valid permissions for each item
        // work out whether they still have that permission somehow
        $valid_perms = islandora_workflow_assignment_valid_permissions($object->state); // @TODO
        if(empty(array_intersect($new_perms,$valid_perms))) {
          // remove assignments
          // @TODO make this into a batch job?
          $predicate = 'info:islandora/islandora-system:def/islandora_workflow#assignee';
          $object = $assignee->name;
          $optional_args = array('isLiteral' => TRUE);
          $apim->purgeRelationship($object_pid, $predicate, $object, $optional_args);
        }
      }
    }
    // @TODO finish
    return $operations;
  }
}

/** 
 * Implements hook_workflow_state_change().
 * Check that an object's assignee still has the right permissions
 * after its workflow state has been changed. 
 * If not, remove the assignee. 
 * @param string $object_pid the PID of the object.
 * @param string $state the object's new workflow state.
 * @return void
 */
function islandora_workflow_assignment_workflow_state_change($object_pid, $state) {
  
  module_load_include('inc','islandora_workflow','islandora_workflow');
  module_load_include('inc','islandora_fedora_api','islandora_fedora_api.raw');
    
  $assignee_name = islandora_workflow_get_object_assignee($object_pid);
  if (!$assignee_name) {
    return; 
  }
  $assignee = user_load(array('name' => $assignee_name));
  $valid_permissions = islandora_workflow_assignment_valid_permissions($state);
  $is_assignee_valid = FALSE;
  foreach($valid_permissions as $permission) {
    if (user_access($permission,$assignee)) {
      $is_assignee_valid = TRUE;
      break;
    }
  }
  if(!$is_assignee_valid) {
    $apim = new FedoraAPIM();
    $predicate = 'info:islandora/islandora-system:def/islandora_workflow#assignee';
    $object = $assignee->name;
    $optional_args = array('isLiteral' => TRUE);
    $apim->purgeRelationship($object_pid, $predicate, $object, $optional_args);
  }
}
